type Bet {
  id: ID!
  match: Match!
  placedAt: DateTime!
  user: User!
  winner: Roster!
}

"""
Autogenerated input type of CreateMatchMutation
"""
input CreateMatchMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  endAt: Time
  lowerRosterId: ID
  startAt: Time!
  tournamentId: ID!
  upperRosterId: ID
  winnerId: ID
}

"""
Autogenerated return type of CreateMatchMutation
"""
type CreateMatchMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  match: Match!
}

"""
Autogenerated input type of CreateTournamentMutation
"""
input CreateTournamentMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  endAt: Time
  location: String
  name: String!
  startAt: Time!
}

"""
Autogenerated return type of CreateTournamentMutation
"""
type CreateTournamentMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  tournament: Tournament
}

scalar DateTime

"""
Autogenerated input type of DeleteTournamentMutation
"""
input DeleteTournamentMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeleteTournamentMutation
"""
type DeleteTournamentMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: Boolean!
}

type Like {
  id: ID!
  likeable: Likeable!
  user: User!
}

union Likeable = Player | Team

type Match {
  bets: [Bet!]!
  endAt: DateTime
  id: ID!
  lowerRosterId: ID!
  rosters: [Roster!]!
  startAt: DateTime!
  tournament: Tournament!
  upperRosterId: ID!
  winner: Roster
  winnerId: ID
}

type Mutation {
  createMatch(input: CreateMatchMutationInput!): CreateMatchMutationPayload
  createTournament(input: CreateTournamentMutationInput!): CreateTournamentMutationPayload
  deleteTournament(input: DeleteTournamentMutationInput!): DeleteTournamentMutationPayload
  updateTournament(input: UpdateTournamentMutationInput!): UpdateTournamentMutationPayload
}

type Player {
  active: Boolean
  id: ID!
  name: String!
  nationality: String!
  nickname: String!
  presentationName: String!
  rankings: [PlayerRanking!]!
  rosters: [Roster!]!
  teams: [Team!]!
}

type PlayerRanking {
  id: ID!
  player: Player
  rank: Int!
  rankedAt: DateTime!
}

type Query {
  matches: [Match!]!
  tournament(id: ID!): Tournament!
  tournaments(location: String, search: String, startDate: Time): [Tournament!]!
}

type Roster {
  endAt: DateTime
  id: ID!
  logo: String
  name: String
  players: [Player!]!
  startAt: DateTime!
  team: Team!
}

type Team {
  active: Boolean
  id: ID!
  logo: String
  name: String!
  players: [Player!]!
  rankings: [TeamRanking!]!
  rosters: [Roster!]!
}

type TeamRanking {
  id: ID!
  points: Int!
  rank: Int!
  rankedAt: DateTime!
  team: Team
}

"""
Time represented in ISO 8601
"""
scalar Time

type Tournament {
  champions: Team
  endAt: DateTime!
  finished: Boolean!
  id: ID!
  location: String
  matches: [Match!]!
  name: String!
  rosters: [Roster!]!
  startAt: DateTime!
  teams: [Team!]!
  teamsCount: Int
  tournamentPlacements: [TournamentPlacement!]!
}

type TournamentPlacement {
  id: ID!
  place: Int!
  prize: Float
  roster: Roster!
  rosterId: ID!
  team: Team!
  tournament: Tournament
}

"""
Autogenerated input type of UpdateTournamentMutation
"""
input UpdateTournamentMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  endAt: Time!
  id: ID!
  location: String
  name: String!
  startAt: Time!
}

"""
Autogenerated return type of UpdateTournamentMutation
"""
type UpdateTournamentMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  tournament: Tournament
}

type User {
  active: Boolean
  bets: [Bet!]!
  email: String!
  friends: [User!]!
  id: ID!
  likedPlayers: [Player!]!
  likedTeams: [Team!]!
  likes: [Like!]!
  name: String!
  nationality: String!
  nickname: String!
}